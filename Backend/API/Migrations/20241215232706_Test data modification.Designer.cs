// <auto-generated />
using System;
using GPS.API.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GPS.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241215232706_Test data modification")]
    partial class Testdatamodification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GPS.API.Data.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufactureYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Buses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = "20",
                            ManufactureYear = "2002",
                            Manufacturer = "MAN",
                            Model = "MK2",
                            RegistrationNumber = "12345678",
                            TenantId = "mostar"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = "21",
                            ManufactureYear = "2003",
                            Manufacturer = "MAN",
                            Model = "MK3",
                            RegistrationNumber = "asd5678",
                            TenantId = "mostar"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CCV")
                        .HasColumnType("int");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CreditCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CCV = 123,
                            CardName = "Faris",
                            CardNumber = "1234 5679 8791",
                            ExpirationDate = "7/28",
                            TenantId = "mostar"
                        },
                        new
                        {
                            Id = 2,
                            CCV = 254,
                            CardName = "Nedim",
                            CardNumber = "2432 4454 4545",
                            ExpirationDate = "7/28",
                            TenantId = "mostar"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("DiscountValue")
                        .HasColumnType("real");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscountName = "Student",
                            DiscountValue = 0.15f,
                            TenantId = "mostar"
                        },
                        new
                        {
                            Id = 2,
                            DiscountName = "Penzioner",
                            DiscountValue = 0.17f,
                            TenantId = "mostar"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5f,
                            TenantId = "mostar",
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 3f,
                            TenantId = "mostar",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompleteDistance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndingStationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartingStationId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EndingStationId");

                    b.HasIndex("StartingStationId");

                    b.ToTable("Lines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompleteDistance = "10",
                            EndingStationId = 1,
                            IsActive = true,
                            Name = "21",
                            StartingStationId = 2,
                            TenantId = "mostar"
                        },
                        new
                        {
                            Id = 2,
                            CompleteDistance = "10",
                            EndingStationId = 1,
                            IsActive = true,
                            Name = "21",
                            StartingStationId = 2,
                            TenantId = "mostar"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.MyAppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MyAppUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GPS.API.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2024, 1, 1),
                            Description = "New notif",
                            Duration = new TimeOnly(1, 1, 1),
                            IsActive = true,
                            LineId = 1,
                            NotificationTypeId = 1,
                            TenantId = "mostar"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2024, 1, 1),
                            Description = "New notif",
                            Duration = new TimeOnly(1, 1, 1),
                            IsActive = true,
                            LineId = 2,
                            NotificationTypeId = 2,
                            TenantId = "mostar"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A warning notif",
                            Name = "Warning",
                            TenantId = "mostar"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A error notif",
                            Name = "Error",
                            TenantId = "mostar"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.PassengerCreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreditCardId")
                        .HasColumnType("int");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SavingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("PassengerId");

                    b.ToTable("PassengerCreditCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreditCardId = 1,
                            PassengerId = 5,
                            SavingDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "mostar"
                        },
                        new
                        {
                            Id = 2,
                            CreditCardId = 2,
                            PassengerId = 6,
                            SavingDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "mostar"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("DistanceFromTheNextStation")
                        .HasColumnType("real");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("StationId");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DistanceFromTheNextStation = 15.6f,
                            LineId = 1,
                            StationId = 1,
                            TenantId = "mostar"
                        },
                        new
                        {
                            Id = 2,
                            DistanceFromTheNextStation = 15.6f,
                            LineId = 2,
                            StationId = 2,
                            TenantId = "mostar"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("GPS.API.Data.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ShiftDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("ShiftEndingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ShiftStartingTime")
                        .HasColumnType("time");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("DriverId");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusId = 1,
                            DriverId = 1,
                            ShiftDate = new DateOnly(2024, 1, 1),
                            ShiftEndingTime = new TimeOnly(16, 0, 0),
                            ShiftStartingTime = new TimeOnly(8, 0, 0),
                            TenantId = "mostar"
                        },
                        new
                        {
                            Id = 2,
                            BusId = 2,
                            DriverId = 2,
                            ShiftDate = new DateOnly(2024, 1, 1),
                            ShiftEndingTime = new TimeOnly(16, 0, 0),
                            ShiftStartingTime = new TimeOnly(8, 0, 0),
                            TenantId = "mostar"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GPSCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GPSCode = "6.6.6",
                            Location = "Bafo",
                            Name = "Bafo",
                            TenantId = "mostar",
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 2,
                            GPSCode = "13123",
                            Location = "Sutina",
                            Name = "Sutina1",
                            TenantId = "mostar",
                            ZoneId = 2
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.SystemActionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsException")
                        .HasColumnType("bit");

                    b.Property<string>("PostData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeOfAction")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SystemActionsLog");
                });

            modelBuilder.Entity("GPS.API.Data.Models.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = "mostar",
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = "sarajevo",
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = "bugojno",
                            Name = "Bugojno"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<byte[]>("QrCode")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("TicketTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationDate = new DateTime(2024, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LineId = 1,
                            QrCode = new byte[0],
                            TenantId = "mostar",
                            TicketTypeId = 1,
                            UserId = 2,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationDate = new DateTime(2024, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LineId = 2,
                            QrCode = new byte[0],
                            TenantId = "mostar",
                            TicketTypeId = 2,
                            UserId = 1,
                            ZoneId = 1
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Basic",
                            TenantId = "mostar"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Advanced",
                            TenantId = "mostar"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Zones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Zone one",
                            Price = 1.5m,
                            TenantId = "mostar"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Zone two",
                            Price = 2.1m,
                            TenantId = "mostar"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Zone three",
                            Price = 2.7m,
                            TenantId = "mostar"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.Driver", b =>
                {
                    b.HasBaseType("GPS.API.Data.Models.MyAppUser");

                    b.Property<string>("DriversLicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("WorkingHoursInAWeek")
                        .HasColumnType("real");

                    b.ToTable("Drivers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "1",
                            FirstName = "Adi",
                            LastName = "Gosto",
                            PasswordHash = new byte[] { 118, 153, 65, 36, 50, 227, 71, 12, 109, 198, 149, 177, 208, 179, 31, 163, 138, 137, 161, 130, 128, 239, 146, 99, 219, 254, 210, 71, 59, 96, 63, 240, 251, 179, 150, 211, 59, 94, 186, 93, 136, 66, 239, 75, 32, 204, 178, 187, 220, 210, 39, 182, 116, 239, 91, 112, 59, 119, 70, 13, 7, 218, 41, 134 },
                            PasswordSalt = new byte[] { 125, 53, 50, 234, 144, 66, 71, 226, 0, 91, 16, 35, 99, 4, 231, 12, 58, 122, 131, 197, 52, 224, 110, 182, 211, 145, 96, 241, 18, 111, 173, 18, 47, 167, 245, 205, 240, 152, 52, 211, 141, 49, 240, 89, 209, 4, 205, 241, 87, 250, 24, 243, 232, 29, 90, 6, 118, 149, 29, 16, 208, 30, 173, 118, 66, 204, 99, 27, 98, 148, 135, 27, 159, 154, 87, 192, 128, 10, 152, 223, 50, 209, 219, 191, 124, 177, 219, 245, 247, 56, 143, 89, 5, 94, 252, 49, 217, 174, 106, 249, 14, 231, 196, 70, 156, 74, 199, 191, 200, 128, 131, 78, 22, 70, 93, 166, 189, 149, 81, 116, 215, 47, 15, 52, 103, 136, 122, 219 },
                            TenantId = "mostar",
                            DriversLicenseNumber = "a1435affaa",
                            HireDate = new DateOnly(2024, 12, 1),
                            License = "1123123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "2",
                            FirstName = "Nedim",
                            LastName = "Jugo",
                            PasswordHash = new byte[] { 118, 153, 65, 36, 50, 227, 71, 12, 109, 198, 149, 177, 208, 179, 31, 163, 138, 137, 161, 130, 128, 239, 146, 99, 219, 254, 210, 71, 59, 96, 63, 240, 251, 179, 150, 211, 59, 94, 186, 93, 136, 66, 239, 75, 32, 204, 178, 187, 220, 210, 39, 182, 116, 239, 91, 112, 59, 119, 70, 13, 7, 218, 41, 134 },
                            PasswordSalt = new byte[] { 125, 53, 50, 234, 144, 66, 71, 226, 0, 91, 16, 35, 99, 4, 231, 12, 58, 122, 131, 197, 52, 224, 110, 182, 211, 145, 96, 241, 18, 111, 173, 18, 47, 167, 245, 205, 240, 152, 52, 211, 141, 49, 240, 89, 209, 4, 205, 241, 87, 250, 24, 243, 232, 29, 90, 6, 118, 149, 29, 16, 208, 30, 173, 118, 66, 204, 99, 27, 98, 148, 135, 27, 159, 154, 87, 192, 128, 10, 152, 223, 50, 209, 219, 191, 124, 177, 219, 245, 247, 56, 143, 89, 5, 94, 252, 49, 217, 174, 106, 249, 14, 231, 196, 70, 156, 74, 199, 191, 200, 128, 131, 78, 22, 70, 93, 166, 189, 149, 81, 116, 215, 47, 15, 52, 103, 136, 122, 219 },
                            TenantId = "mostar",
                            DriversLicenseNumber = "adasd43aa",
                            HireDate = new DateOnly(2024, 12, 1),
                            License = "11jdfghsdjg23"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.Manager", b =>
                {
                    b.HasBaseType("GPS.API.Data.Models.MyAppUser");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("ManagerLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Managers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "3",
                            FirstName = "Adil",
                            LastName = "Joldic",
                            PasswordHash = new byte[] { 118, 153, 65, 36, 50, 227, 71, 12, 109, 198, 149, 177, 208, 179, 31, 163, 138, 137, 161, 130, 128, 239, 146, 99, 219, 254, 210, 71, 59, 96, 63, 240, 251, 179, 150, 211, 59, 94, 186, 93, 136, 66, 239, 75, 32, 204, 178, 187, 220, 210, 39, 182, 116, 239, 91, 112, 59, 119, 70, 13, 7, 218, 41, 134 },
                            PasswordSalt = new byte[] { 125, 53, 50, 234, 144, 66, 71, 226, 0, 91, 16, 35, 99, 4, 231, 12, 58, 122, 131, 197, 52, 224, 110, 182, 211, 145, 96, 241, 18, 111, 173, 18, 47, 167, 245, 205, 240, 152, 52, 211, 141, 49, 240, 89, 209, 4, 205, 241, 87, 250, 24, 243, 232, 29, 90, 6, 118, 149, 29, 16, 208, 30, 173, 118, 66, 204, 99, 27, 98, 148, 135, 27, 159, 154, 87, 192, 128, 10, 152, 223, 50, 209, 219, 191, 124, 177, 219, 245, 247, 56, 143, 89, 5, 94, 252, 49, 217, 174, 106, 249, 14, 231, 196, 70, 156, 74, 199, 191, 200, 128, 131, 78, 22, 70, 93, 166, 189, 149, 81, 116, 215, 47, 15, 52, 103, 136, 122, 219 },
                            TenantId = "mostar",
                            Department = "HR",
                            HireDate = new DateOnly(2024, 12, 1),
                            ManagerLevel = "1"
                        },
                        new
                        {
                            Id = 4,
                            Email = "4",
                            FirstName = "Denis",
                            LastName = "Music",
                            PasswordHash = new byte[] { 118, 153, 65, 36, 50, 227, 71, 12, 109, 198, 149, 177, 208, 179, 31, 163, 138, 137, 161, 130, 128, 239, 146, 99, 219, 254, 210, 71, 59, 96, 63, 240, 251, 179, 150, 211, 59, 94, 186, 93, 136, 66, 239, 75, 32, 204, 178, 187, 220, 210, 39, 182, 116, 239, 91, 112, 59, 119, 70, 13, 7, 218, 41, 134 },
                            PasswordSalt = new byte[] { 125, 53, 50, 234, 144, 66, 71, 226, 0, 91, 16, 35, 99, 4, 231, 12, 58, 122, 131, 197, 52, 224, 110, 182, 211, 145, 96, 241, 18, 111, 173, 18, 47, 167, 245, 205, 240, 152, 52, 211, 141, 49, 240, 89, 209, 4, 205, 241, 87, 250, 24, 243, 232, 29, 90, 6, 118, 149, 29, 16, 208, 30, 173, 118, 66, 204, 99, 27, 98, 148, 135, 27, 159, 154, 87, 192, 128, 10, 152, 223, 50, 209, 219, 191, 124, 177, 219, 245, 247, 56, 143, 89, 5, 94, 252, 49, 217, 174, 106, 249, 14, 231, 196, 70, 156, 74, 199, 191, 200, 128, 131, 78, 22, 70, 93, 166, 189, 149, 81, 116, 215, 47, 15, 52, 103, 136, 122, 219 },
                            TenantId = "mostar",
                            Department = "IT",
                            HireDate = new DateOnly(2024, 12, 1),
                            ManagerLevel = "2"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.Passenger", b =>
                {
                    b.HasBaseType("GPS.API.Data.Models.MyAppUser");

                    b.Property<int?>("DiscountID")
                        .HasColumnType("int");

                    b.HasIndex("DiscountID");

                    b.ToTable("Passengers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Email = "5",
                            FirstName = "Adil",
                            LastName = "Joldic",
                            PasswordHash = new byte[] { 118, 153, 65, 36, 50, 227, 71, 12, 109, 198, 149, 177, 208, 179, 31, 163, 138, 137, 161, 130, 128, 239, 146, 99, 219, 254, 210, 71, 59, 96, 63, 240, 251, 179, 150, 211, 59, 94, 186, 93, 136, 66, 239, 75, 32, 204, 178, 187, 220, 210, 39, 182, 116, 239, 91, 112, 59, 119, 70, 13, 7, 218, 41, 134 },
                            PasswordSalt = new byte[] { 125, 53, 50, 234, 144, 66, 71, 226, 0, 91, 16, 35, 99, 4, 231, 12, 58, 122, 131, 197, 52, 224, 110, 182, 211, 145, 96, 241, 18, 111, 173, 18, 47, 167, 245, 205, 240, 152, 52, 211, 141, 49, 240, 89, 209, 4, 205, 241, 87, 250, 24, 243, 232, 29, 90, 6, 118, 149, 29, 16, 208, 30, 173, 118, 66, 204, 99, 27, 98, 148, 135, 27, 159, 154, 87, 192, 128, 10, 152, 223, 50, 209, 219, 191, 124, 177, 219, 245, 247, 56, 143, 89, 5, 94, 252, 49, 217, 174, 106, 249, 14, 231, 196, 70, 156, 74, 199, 191, 200, 128, 131, 78, 22, 70, 93, 166, 189, 149, 81, 116, 215, 47, 15, 52, 103, 136, 122, 219 },
                            TenantId = "mostar"
                        },
                        new
                        {
                            Id = 6,
                            Email = "6",
                            FirstName = "Denis",
                            LastName = "Music",
                            PasswordHash = new byte[] { 118, 153, 65, 36, 50, 227, 71, 12, 109, 198, 149, 177, 208, 179, 31, 163, 138, 137, 161, 130, 128, 239, 146, 99, 219, 254, 210, 71, 59, 96, 63, 240, 251, 179, 150, 211, 59, 94, 186, 93, 136, 66, 239, 75, 32, 204, 178, 187, 220, 210, 39, 182, 116, 239, 91, 112, 59, 119, 70, 13, 7, 218, 41, 134 },
                            PasswordSalt = new byte[] { 125, 53, 50, 234, 144, 66, 71, 226, 0, 91, 16, 35, 99, 4, 231, 12, 58, 122, 131, 197, 52, 224, 110, 182, 211, 145, 96, 241, 18, 111, 173, 18, 47, 167, 245, 205, 240, 152, 52, 211, 141, 49, 240, 89, 209, 4, 205, 241, 87, 250, 24, 243, 232, 29, 90, 6, 118, 149, 29, 16, 208, 30, 173, 118, 66, 204, 99, 27, 98, 148, 135, 27, 159, 154, 87, 192, 128, 10, 152, 223, 50, 209, 219, 191, 124, 177, 219, 245, 247, 56, 143, 89, 5, 94, 252, 49, 217, 174, 106, 249, 14, 231, 196, 70, 156, 74, 199, 191, 200, 128, 131, 78, 22, 70, 93, 166, 189, 149, 81, 116, 215, 47, 15, 52, 103, 136, 122, 219 },
                            TenantId = "mostar"
                        });
                });

            modelBuilder.Entity("GPS.API.Data.Models.Feedback", b =>
                {
                    b.HasOne("GPS.API.Data.Models.MyAppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GPS.API.Data.Models.Line", b =>
                {
                    b.HasOne("GPS.API.Data.Models.Station", "EndingStation")
                        .WithMany()
                        .HasForeignKey("EndingStationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPS.API.Data.Models.Station", "StartingStation")
                        .WithMany()
                        .HasForeignKey("StartingStationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EndingStation");

                    b.Navigation("StartingStation");
                });

            modelBuilder.Entity("GPS.API.Data.Models.Notification", b =>
                {
                    b.HasOne("GPS.API.Data.Models.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPS.API.Data.Models.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("GPS.API.Data.Models.PassengerCreditCard", b =>
                {
                    b.HasOne("GPS.API.Data.Models.CreditCard", "CreditCard")
                        .WithMany()
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPS.API.Data.Models.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreditCard");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("GPS.API.Data.Models.Route", b =>
                {
                    b.HasOne("GPS.API.Data.Models.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPS.API.Data.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("GPS.API.Data.Models.Schedule", b =>
                {
                    b.HasOne("GPS.API.Data.Models.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("GPS.API.Data.Models.Shift", b =>
                {
                    b.HasOne("GPS.API.Data.Models.Bus", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPS.API.Data.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("GPS.API.Data.Models.Station", b =>
                {
                    b.HasOne("GPS.API.Data.Models.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("GPS.API.Data.Models.SystemActionLog", b =>
                {
                    b.HasOne("GPS.API.Data.Models.MyAppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GPS.API.Data.Models.Ticket", b =>
                {
                    b.HasOne("GPS.API.Data.Models.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPS.API.Data.Models.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPS.API.Data.Models.MyAppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GPS.API.Data.Models.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("TicketType");

                    b.Navigation("User");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("GPS.API.Data.Models.Driver", b =>
                {
                    b.HasOne("GPS.API.Data.Models.MyAppUser", null)
                        .WithOne()
                        .HasForeignKey("GPS.API.Data.Models.Driver", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GPS.API.Data.Models.Manager", b =>
                {
                    b.HasOne("GPS.API.Data.Models.MyAppUser", null)
                        .WithOne()
                        .HasForeignKey("GPS.API.Data.Models.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GPS.API.Data.Models.Passenger", b =>
                {
                    b.HasOne("GPS.API.Data.Models.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GPS.API.Data.Models.MyAppUser", null)
                        .WithOne()
                        .HasForeignKey("GPS.API.Data.Models.Passenger", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");
                });
#pragma warning restore 612, 618
        }
    }
}
